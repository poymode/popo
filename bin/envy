#!/usr/bin/env ruby
require 'optparse'
require 'yaml'

module Popo
  class Envy
    POPO_CONFIG_FILE = 'popo.yml'
    ENVYRC_FILE = 'envyrc'
    BASH_PATH = `which bash`.strip
    ENV_CMD = `which env`.strip
    ENVYRC = File.expand_path("../../script/#{ENVYRC_FILE}", __FILE__)

    def self.boot(args)
      options = {}

      optparse = OptionParser.new do |opts|
        opts.on('-d', '--chdir DIRECTORY', 'Changed to a given directory') do |d|
          options[:directory] = d
        end
      end

      optparse.parse!

      self.new(args, options)
    end

    def initialize(args, options)
      @root_path = args.shift
      @options = options
      args = args.join(' ')

      config_file = File.join(@root_path, POPO_CONFIG_FILE)

      if File.exists?(config_file)
        config = YAML.load_file(config_file)
        @popo_path = config['path']
        @popo_target = config['target']
      else
        raise "#{config_file} doesn't exist!"
      end

      if !@options[:directory].nil?
        @directory = File.join(@popo_path, @options[:directory])
        @cmd = ["cd #{@directory};", args].join(' ')
      else
        @cmd = args
      end

    end

    def run!
      cmd = "#{ENV_CMD} "\
            "popo_path=#{@popo_path} "\
            "popo_target=#{@popo_target} "\
            "#{BASH_PATH} -c "\
            "'source #{ENVYRC}; #{@cmd}'"

      system(cmd)
    end
  end
end

Popo::Envy.boot(ARGV).run!
exit $?.exitstatus
